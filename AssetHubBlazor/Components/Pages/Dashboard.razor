@page "/"
@rendermode InteractiveServer
@using AssetHubBlazor.Models
@using AssetHubBlazor.Services
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Enums
@inject AssetService AssetService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="dashboard-title-section">
    <h1 class="dashboard-title">GLOBAL ASSET OVERVIEW</h1>
    <p class="dashboard-subtitle">Monitor and manage assets efficiently. View real-time data and trends.</p>
</div>

<div class="dashboard-chart-section mb-4">
    <Chart Config="barConfig" />
</div>

<div class="card-row summary-cards">
    <div class="summary-card">
        <div class="card-icon"><span class="bi bi-boxes"></span></div>
        <div class="card-value">@TotalAssets</div>
        <div class="card-label">Total Assets</div>
        <div class="card-change positive">+5.16% from 30d ago</div>
    </div>
    <div class="summary-card">
        <div class="card-icon"><span class="bi bi-tools"></span></div>
        <div class="card-value">@InUseCount</div>
        <div class="card-label">In Use</div>
        <div class="card-change positive">+4.73% from 30d ago</div>
    </div>
    <div class="summary-card">
        <div class="card-icon"><span class="bi bi-check-circle"></span></div>
        <div class="card-value">@AvailableCount</div>
        <div class="card-label">Available</div>
        <div class="card-change negative">-2.50% from 30d ago</div>
    </div>
    <div class="summary-card">
        <div class="card-icon"><span class="bi bi-currency-dollar"></span></div>
        <div class="card-value">$15.75K</div>
        <div class="card-label">Avg. Value</div>
        <div class="card-change positive">+5.16% from 30d ago</div>
    </div>
</div>

<div class="dashboard-bottom-row">
    <div class="dashboard-table-section">
        <div class="table-header">
            <span class="table-title" style="font-size:1.25rem; font-weight:600; display:block; margin-bottom:0.5rem;">RECENT ASSETS</span>
            <div style="display: flex; align-items: center; gap: 1rem; justify-content: space-between;">
                <div style="display: flex; align-items: center; gap: 1rem;">
                    <div class="table-tabs">
                        <span class="table-tab @(ActiveBottomTab == "all" ? "active" : "")" @onclick='() => SetActiveTab("all")'>All</span>
                        <span class="table-tab @(ActiveBottomTab == "inuse" ? "active" : "")" @onclick='() => SetActiveTab("inuse")'>In Use</span>
                        <span class="table-tab @(ActiveBottomTab == "available" ? "active" : "")" @onclick='() => SetActiveTab("available")'>Available</span>
                    </div>
                </div>
                <div>
                    <label class="form-label" for="recentCountSelect" style="margin-right: 8px; color: #fff; font-weight: 500;">Show:</label>
                    <InputSelect id="recentCountSelect" @bind-Value="RecentAssetsCount" TValue="int" class="form-select dashboard-select" style="width: 100px; background: #222; color: #fff; border: 1.5px solid var(--accent, #4f8cff); border-radius: 6px; font-weight: 600;">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </InputSelect>
                </div>
            </div>
        </div>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Purchase Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var asset in FilteredRecentAssets)
                {
                    <tr>
                        <td>@asset.Name</td>
                        <td>@asset.Type</td>
                        <td>
                            <span class="badge @(asset.Status == Status.InUse ? "bg-success" : "bg-secondary")">
                                @(asset.Status == Status.InUse ? "In Use" : asset.Status == Status.Available ? "Available" : asset.Status.ToString())
                            </span>
                        </td>
                        <td>@asset.PurchaseDate.ToString("MMM dd")</td>
                        <td>
                            <a class="btn btn-sm btn-gradient" href="/edit/@asset.Id"><span class="bi bi-pencil"></span></a>
                            <button class="btn btn-sm btn-gradient" @onclick="() => SetAssetToDelete(asset)"><span class="bi bi-trash"></span></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="dashboard-news-section mt-4">
    <div class="news-header">
        <span class="news-title">LATEST UPDATES</span>
    </div>
    <div class="news-list">
        <div class="news-item">
            <span class="bi bi-info-circle"></span>
            <span class="news-headline">New asset tracking feature released...</span>
            <a href="#" class="news-link">Learn More</a>
        </div>
        <div class="news-item">
            <span class="bi bi-info-circle"></span>
            <span class="news-headline">Maintenance schedule updated...</span>
            <a href="#" class="news-link">Learn More</a>
        </div>
        <div class="news-item">
            <span class="bi bi-info-circle"></span>
            <span class="news-headline">Asset value analytics improved...</span>
            <a href="#" class="news-link">Learn More</a>
        </div>
        <div class="news-item">
            <span class="bi bi-info-circle"></span>
            <span class="news-headline">Security update for asset data...</span>
            <a href="#" class="news-link">Learn More</a>
        </div>
    </div>
    <button class="btn btn-primary view-all-btn">
        View All <span class="bi bi-arrow-right"></span>
    </button>
</div>

@code {
    private List<Asset> AllAssets = new();
    private string ActiveBottomTab = "all";
    private int RecentAssetsCount { get; set; } = 20;
    private List<Asset> RecentAssets => AllAssets
        .OrderByDescending(a => a.PurchaseDate)
        .Take(RecentAssetsCount)
        .ToList();
    private List<Asset> FilteredRecentAssets => ActiveBottomTab switch
    {
        "inuse" => RecentAssets.Where(a => a.Status == Status.InUse).ToList(),
        "available" => RecentAssets.Where(a => a.Status == Status.Available).ToList(),
        _ => RecentAssets
    };
    private void SetActiveTab(string tab)
    {
        ActiveBottomTab = tab;
    }

    private BarConfig barConfig;

    protected override async Task OnInitializedAsync()
    {
        AllAssets = await AssetService.GetAllAsync();
        SetupBarChart();
    }

    private void SetupBarChart()
    {
        // Group assets by month and sum their values
        var grouped = AllAssets
            .GroupBy(a => new { a.PurchaseDate.Year, a.PurchaseDate.Month })
            .OrderBy(g => g.Key.Year).ThenBy(g => g.Key.Month)
            .Select(g => new
            {
                Label = $"{g.Key.Year}-{g.Key.Month:00}",
                TotalValue = g.Sum(a => a.PurchasePrice)
            }).ToList();

        var labels = grouped.Select(g => g.Label).ToList();
        var data = grouped.Select(g => (double)g.TotalValue).ToList();

        barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = true, Text = "Total Asset Value Over Time" },
                Legend = new Legend { Display = false },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis> { new CategoryAxis { ScaleLabel = new ScaleLabel { Display = true, LabelString = "Month" } } },
                    YAxes = new List<CartesianAxis> { new LinearCartesianAxis { ScaleLabel = new ScaleLabel { Display = true, LabelString = "Total Value ($)" } } }
                }
            }
        };
        foreach (var label in labels)
        {
            barConfig.Data.Labels.Add(label);
        }
        var dataset = new BarDataset<double>(data)
        {
            Label = "Asset Value",
            BackgroundColor = ColorUtil.ColorHexString(75, 192, 192),
            BorderColor = ColorUtil.ColorHexString(75, 192, 192),
            BorderWidth = 1
        };
        barConfig.Data.Datasets.Add(dataset);
    }

    private int TotalAssets => AllAssets.Count;
    private int InUseCount => AllAssets.Count(a => a.Status == Status.InUse);
    private int AvailableCount => AllAssets.Count(a => a.Status == Status.Available);

    private int LaptopCount => AllAssets.Count(a => a.Type == AssetType.Laptop);
    private int PhoneCount => AllAssets.Count(a => a.Type == AssetType.Phone);
    private int MonitorCount => AllAssets.Count(a => a.Type == AssetType.Monitor);

    private decimal AverageValue => AllAssets.Any() ? AllAssets.Average(a => a.PurchasePrice) : 0;

    private Asset AssetToDelete { get; set; }
    private async Task SetAssetToDelete(Asset asset)
    {
        AssetToDelete = asset;
        await ConfirmDelete();
    }
    private async Task ConfirmDelete()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this asset?");
        if (confirm)
        {
            await AssetService.RemoveAsync(AssetToDelete);
            AllAssets = await AssetService.GetAllAsync();
        }
    }
}