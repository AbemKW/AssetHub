@page "/view/{id:int}"
@rendermode InteractiveServer
@using AssetHubBlazor.Models
@using AssetHubBlazor.Services
@inject AssetService AssetService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Asset Details</h3>

@if (Asset == null)
{
    <div class="alert alert-info">Loading asset details...</div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4>@Asset.Name</h4>
            <span class="badge
                    @(Asset.Status == Status.InUse ? "bg-success" :
                                    Asset.Status == Status.Available ? "bg-secondary" :
                                    "bg-warning")">
                                               @Asset.Status
                                           </span>
                                       </div>

        <div class="card-body">
            <dl class="row">
                <!-- Name -->
                <dt class="col-sm-3">Name</dt>
                <dd class="col-sm-9">@Asset.Name</dd>

                <!-- Type -->
                <dt class="col-sm-3">Type</dt>
                <dd class="col-sm-9">@Asset.Type.ToString()</dd>

                <!-- Brand -->
                <dt class="col-sm-3">Brand</dt>
                <dd class="col-sm-9">@Asset.Brand</dd>

                <!-- Model Number -->
                <dt class="col-sm-3">Model Number</dt>
                <dd class="col-sm-9">@Asset.ModelNumber</dd>

                <!-- Serial Number -->
                <dt class="col-sm-3">Serial Number</dt>
                <dd class="col-sm-9"><code>@Asset.SerialNumber</code></dd>

                <!-- Status -->
                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">
                    <span class="badge
                            @(Asset.Status == Status.InUse ? "bg-success" :
                                                    Asset.Status == Status.Available ? "bg-secondary" : "bg-warning")">
                    @Asset.Status
                </span>
            </dd>

                <!-- Assigned To -->
                <dt class="col-sm-3">Assigned To</dt>
                <dd class="col-sm-9">@Asset.AssignedTo</dd>

                <!-- Department -->
                <dt class="col-sm-3">Department</dt>
                <dd class="col-sm-9">@Asset.Department</dd>

                <!-- Location -->
                <dt class="col-sm-3">Location</dt>
                <dd class="col-sm-9">@Asset.Location</dd>

                <!-- Purchase Date -->
                <dt class="col-sm-3">Purchase Date</dt>
                <dd class="col-sm-9">@Asset.PurchaseDate.ToString("MMM dd, yyyy")
                </dd>

                <!-- Purchase Price -->
                <dt class="col-sm-3">Purchase Price</dt>
                <dd class="col-sm-9">@Asset.PurchasePrice.ToString("C")</dd>

                <!-- Warranty -->
                <dt class="col-sm-3">Warranty</dt>
                <dd class="col-sm-9">@Asset.WarrantyYears years</dd>

                <!-- Notes -->
                <dt class="col-sm-3">Notes</dt>
                <dd class="col-sm-9">@(string.IsNullOrEmpty(Asset.Notes) ? "No notes" : Asset.Notes)</dd>
            </dl>
        </div>

        <div class="card-footer text-end">
            <button class="btn btn-secondary me-2" @onclick="GoBack">Back</button>
            <a href="/edit/@Asset.Id" class="btn btn-primary">Edit Asset</a>
            <button class="btn btn-danger" @onclick="ConfirmDelete">
                Delete Asset
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Asset? Asset { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Asset = await AssetService.GetByIdAsync(id);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/find");
    }
    private async Task ConfirmDelete()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this asset?");
        if (confirm)
        {
            await AssetService.RemoveAsync(Asset);
            NavigationManager.NavigateTo("/find");
        }
    }
}