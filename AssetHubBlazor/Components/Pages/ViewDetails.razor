@page "/view/{id:int}"
@rendermode InteractiveServer
@using AssetHubBlazor.Models
@using AssetHubBlazor.Services
@inject AssetService AssetService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="view-details-page-container">
    <div class="view-details-header mb-4">
        <h2 class="page-title">Asset Details</h2>
        <p class="page-desc">View all information about this asset below.</p>
    </div>
    @if (Asset == null)
    {
        <div class="card p-4 mb-4">Loading asset details...</div>
    }
    else
    {
        <div class="card p-4">
            <div class="card-header d-flex align-items-center justify-content-between mb-3">
                <h4 class="mb-0">@Asset.Name</h4>
                <span class="badge @(Asset.Status == Status.InUse ? "bg-success" : "bg-secondary")">
                    @Asset.Status
                </span>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-3">Name</dt>
                    <dd class="col-sm-9">@Asset.Name</dd>
                    <dt class="col-sm-3">Type</dt>
                    <dd class="col-sm-9">@Asset.Type.ToString()</dd>
                    <dt class="col-sm-3">Brand</dt>
                    <dd class="col-sm-9">@Asset.Brand</dd>
                    <dt class="col-sm-3">Model Number</dt>
                    <dd class="col-sm-9">@Asset.ModelNumber</dd>
                    <dt class="col-sm-3">Serial Number</dt>
                    <dd class="col-sm-9"><code>@Asset.SerialNumber</code></dd>
                    <dt class="col-sm-3">Status</dt>
                    <dd class="col-sm-9">
                        <span class="badge @(Asset.Status == Status.InUse ? "bg-success" : "bg-secondary")">
                            @Asset.Status
                        </span>
                    </dd>
                    <dt class="col-sm-3">Assigned To</dt>
                    <dd class="col-sm-9">@Asset.AssignedTo</dd>
                    <dt class="col-sm-3">Department</dt>
                    <dd class="col-sm-9">@Asset.Department</dd>
                    <dt class="col-sm-3">Location</dt>
                    <dd class="col-sm-9">@Asset.Location</dd>
                    <dt class="col-sm-3">Purchase Date</dt>
                    <dd class="col-sm-9">@Asset.PurchaseDate.ToString("MMM dd, yyyy")</dd>
                    <dt class="col-sm-3">Purchase Price</dt>
                    <dd class="col-sm-9">@Asset.PurchasePrice.ToString("C")</dd>
                    <dt class="col-sm-3">Warranty</dt>
                    <dd class="col-sm-9">@Asset.WarrantyYears years</dd>
                    <dt class="col-sm-3">Notes</dt>
                    <dd class="col-sm-9">@(string.IsNullOrEmpty(Asset.Notes) ? "No notes" : Asset.Notes)</dd>
                </dl>
            </div>
            <div class="card-footer d-flex justify-content-end gap-2">
                <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                <a href="/edit/@Asset.Id" class="btn btn-primary">Edit Asset</a>
                <button class="btn btn-danger" @onclick="ConfirmDelete">Delete Asset</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Asset? Asset { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Asset = await AssetService.GetByIdAsync(id);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/find");
    }
    private async Task ConfirmDelete()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this asset?");
        if (confirm)
        {
            await AssetService.RemoveAsync(Asset);
            NavigationManager.NavigateTo("/find");
        }
    }
}